    global string $testingthisstring;
    global string $controlGroupsGroup[];
    global string $controlsGroup[];
    global string $jointsGroup[];

global proc ControlsSetup (float $ControlSize, string $ChainName, float $StartNum){
    string $sels[] = `ls -sl`;

    int $iterations = `size($sels)`;
    global string $jointsGroup[];
    global string $controlGroupsGroup[];
    global string $controlsGroup[];
    global string $testingthisstring;
    
        // making the controls and groups

    if ($StartNum == 1)
        {
            clear $controlsGroup;
            clear $controlGroupsGroup;
            clear $jointsGroup;
            
            $testingthisstring = "hello there";
            print ($testingthisstring);
            
        for ($i = 0; $i < $iterations; $i ++)
            {
            $jointsGroup[$i] = $sels[$i];
            //make circle and group
            circle   -c 0 0 0 -nr 0 1 0 -sw 360 -r $ControlSize -d 3 -ut 0 -tol 0.01 -s 8 -ch 1; objectMoveCommand;
            string $temp[] = `ls -sl`;
            $controlsGroup[$i] = $temp[0];
            doGroup 0 1 1;
                string $temp[] = `ls -sl`;
        //match transforms
            select -r $temp;
            select  -add $sels[$i];
            MatchTransform;
            matchTransform;
            select -cl ;
            $controlGroupsGroup[$i] = $temp[0];

            }
            
           
        }
    
    // now go scale and rotate the controls
    
    
    // constraining everything
    
    
    if ($StartNum == 2)
        {
            $iterations = size($controlsGroup);
            print ($jointsGroup);
            //print ($controlsGroup);
        for ($z = 0; $z < $iterations; $z ++)
            {
                // constraining the joints
                select -cl;
                select -r $controlsGroup[$z];
                FreezeTransformations; // freezing transforms
                select -cl;
                select -r $controlsGroup[$z];
                select -add $jointsGroup[$z];
                parentConstraint -mo -weight 1;
                scaleConstraint -offset 1 1 1 -weight 1;
                
                //constraining controls
                if ($z + 1 < $iterations)
                {
                select -cl;
                select -r $controlsGroup[$z];
                select -add $controlGroupsGroup[($z + 1)];
                parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1;
                parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1;
                }
                //Setting up broken FK
                select -cl;
                select -r $controlsGroup[$z];
                addAttr -longName "FollowTranslates" -defaultValue 1.0 -minValue 0 -maxValue 1;
                setAttr -e-keyable true ($controlsGroup[$z]+"." + "FollowTranslates");
                
                addAttr -longName "FollowRotates" -defaultValue 1.0 -minValue 0 -maxValue 1;
                setAttr -e-keyable true ($controlsGroup[$z]+"." + "FollowRotates");
                
                
            }
        }        
    
   //print ($jointsGroup);
  // print ($controlGroupsGroup);
   //print ($controlsGroup);
}


global proc WindowMaker (){	// create a window
	window;	
	            //formatting the window
        columnLayout -columnAttach "both" 20 -rowSpacing 10 -columnWidth 300;
			// create the content and map it to functions
			text -label "Step 1: create Joints";
			text -label "Step 2: Orient and Select joints in proper order";
			button -label "Step 3: Make Controls and Groups" -command "FirstStep";
			text -label "Step 4: Resize controls";
			button -label "Step 5: Constrain Everything" -command "SecondStep";

	    // show the window we just created
	showWindow;
	
}

global proc FirstStep (){
    ControlsSetup (1, "Arm", 1);
}

global proc SecondStep (){
    ControlsSetup (1, "Arm", 2);
}

ControlsSetup (1, "Arm", 2);
WindowMaker ();